Code Unit Tests:

Here is a simple unit test you can write for "Hello World" console application in C#. Please note that testing a console application is not usually needed as it's straightforward. However, in more complex cases, you might need to abstract the logic into a callable method that you can then test.

```C#
using NUnit.Framework;
using System;
using System.IO;

namespace HelloWorld.Tests
{
    [TestFixture]
    public class ProgramTests
    {
        [Test]
        public void Main_PrintsHelloWorld_Successfully()
        {
            using(StringWriter sw = new StringWriter())
            {
                Console.SetOut(sw);
                Program.Main(new string[0]);

                string expected = string.Format("Hello World!{0}", Environment.NewLine);
                Assert.AreEqual(expected, sw.ToString());
            }
        }
    }
}
```

This test temporarily replaces the standard output (console) with a StringWriter so that you can verify if the output is correct (which is "Hello World!" in your case). 

The test calls the 'Main' method with an empty string array and then checks if the result equals "Hello World!" followed by a new line (which is added by Console.WriteLine).

Please note that you need to include NUnit.Framework for writing unit tests in C#.

It's also worth mentioning that in a real-life scenario, you'd want to structure your applications in a way that separates the business logic from the UI (console, in this case), which makes it easier to test the business logic without having to interact with the UI.

This is a basic example to get started with unit testing in C#.  If you plan on doing more complex tasks, I would recommend looking into setting up a dedicated unit testing project in your solution.